@page "/detailMonitoring/{id:int}"
@using ATMBank_.Data
@using ATMBank_.Models;
@inject CasetteService casetteService
@inject ATMService atmService
@inject NavigationManager NavigationManager

<PageTitle>Monitoring ATM Bank</PageTitle>

<h1>Monitoring @ATMName</h1>

<p>Berikut adalah jumlah uang kertas yang masih ada pada mesin ATM ini</p

@if (casette is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <a href="addCasette/@Id">
        <span type="submit" class="btn btn-primary mb-3">Tambah Pecahan Uang Kertas</span>
    </a>

    <table class="table">
        <thead>
            <tr>
                <th>No</th>
                <th>Nominal</th>
                <th>Jumlah</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cas in casette!)
            {
                <tr>
                    <td>@(casette.IndexOf(cas) + 1)</td>
                    <td>Rp. @cas.Nominal.ToString("#,##0")</td>
                    <td>@cas.Jumlah</td>
                    <td>
                        <a href="updateCasette/@cas.Id">
                            <span type="button" class="btn btn-primary mb-3"><i class="oi oi-pencil"></i></span>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private ATM atm = new ATM();

    private string? ATMName;

    List<Casette>? casette;

    protected override async Task OnInitializedAsync()
    {
        casette = await Task.Run(() => casetteService.GetCasettesByATMId(this.Id));

        atm = await Task.Run(() => atmService.GetATMById(this.Id));
        
        ATMName = atm?.NamaATM;
    }
}
